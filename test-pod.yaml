apiVersion: v1
kind: Pod
metadata:
  name: security-test-pod-insecure
  namespace: default
  labels:
    app: security-test
  annotations:
    seccomp.security.alpha.kubernetes.io/pod: "unconfined"
spec:
  # Enable host network namespace
  hostNetwork: true
  hostPID: true
  hostIPC: true
  # Automatically mount service account token
  automountServiceAccountToken: true
  # Use the default service account (no restrictions)
  serviceAccountName: default
  # Use unconfined seccomp profile (modern syntax)
  securityContext:
    seccompProfile:
      type: Unconfined
  
  containers:
  - name: security-test
    image: ubuntu:latest
    # Run as root with privileged security context
    securityContext:
      privileged: true
      runAsUser: 0
      allowPrivilegeEscalation: true
      readOnlyRootFilesystem: false
      appArmorProfile:
        type: Unconfined
      capabilities:
        add:
        - ALL
        - SYS_ADMIN
        - NET_ADMIN
        - SYS_MODULE
        - SYS_PTRACE
        - SYS_BOOT
        - CHOWN
        - DAC_OVERRIDE
        - SETUID
        - BPF
        drop: []
    # Mount sensitive host paths
    volumeMounts:
    - name: host-root
      mountPath: /host-root
    - name: docker-sock
      mountPath: /var/run/docker.sock
    - name: proc
      mountPath: /host-proc
    - name: sys
      mountPath: /host-sys
    - name: dev
      mountPath: /host-dev
    - name: etc-passwd
      mountPath: /etc/passwd
      readOnly: false
    - name: var-lib-kubelet
      mountPath: /var/lib/kubelet
    - name: boot
      mountPath: /boot
    - name: etc-kubernetes
      mountPath: /etc/kubernetes
    - name: run-secrets
      mountPath: /run/secrets
    - name: etc
      mountPath: /etc
    - name: var
      mountPath: /var
    - name: bin
      mountPath: /bin
      readOnly: false
    - name: sbin
      mountPath: /sbin
      readOnly: false
    - name: usr-bin
      mountPath: /usr/bin
      readOnly: false
    - name: lib
      mountPath: /lib
      readOnly: false
    - name: lib64
      mountPath: /lib64
    - name: sys-fs-bpf
      mountPath: /sys/fs/bpf
      readOnly: false
    # No resource limits set
    resources: {}
    # Keep container running and install ALL suspicious tools including eBPF tools
    command: ["/bin/bash"]
    args: ["-c", "apt-get update -qq && apt-get install -y --no-install-recommends nmap nc tcpdump wget curl ssh scp socat tshark hping masscan >/dev/null 2>&1 || true && apt-get install -y linux-tools-common linux-tools-generic bpfcc-tools bpftrace >/dev/null 2>&1 || true && echo 'Starting Bitcoin miner...' && while true; do echo 'Running crypto mining operation xmrig'; sleep 60; done"]
    # Add environment variables with sensitive patterns
    env:
    - name: DB_PASSWORD
      value: "insecure-password-123"
    - name: API_KEY
      value: "api-key-1234567890"
    - name: AWS_ACCESS_KEY
      value: "AKIAIOSFODNN7EXAMPLE"
    - name: AWS_SECRET_KEY
      value: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
    - name: AWS_SESSION_TOKEN
      value: "AQoDYXdzEPT//////////wEXAMPLE"
    - name: CREDIT_CARD_NUMBER
      value: "4111111111111111"
    - name: AZURE_CLIENT_ID
      value: "11111111-1111-1111-1111-111111111111"
    - name: AZURE_TENANT_ID
      value: "22222222-2222-2222-2222-222222222222"
    - name: AZURE_CLIENT_SECRET
      value: "super-secret-azure-key"
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: "/tmp/gcp-credentials.json"
    - name: GOOGLE_CLOUD_PROJECT
      value: "my-project-id"
    - name: DO_AUTH_TOKEN
      value: "dop_v1_example_token"
    - name: DIGITALOCEAN_ACCESS_TOKEN
      value: "dop_v1_example_token_long"
    - name: ALICLOUD_ACCESS_KEY
      value: "LTAI4GExampleKeyHere"
    - name: IBM_CLOUD_API_KEY
      value: "IBMCloudApiKeyExample123"
    - name: RACKSPACE_API_KEY
      value: "rackspaceapikey123456789"
    - name: GITHUB_TOKEN
      value: "ghp_abcdefghijklmnopqrstuvwxyz123456789012"
    - name: GITLAB_TOKEN
      value: "glpat-abcdefghijklmnopqrstuvwxyz12345"
    - name: SLACK_TOKEN
      value: "xoxb-123456789012-123456789012-abcdefghijklmnopqrstuvwx"
    - name: GOOGLE_API_KEY
      value: "AIzaSyCnHXmtGqz3ztb3KXxm1xMOeO3p8EXAMPLE"
    - name: STRIPE_SECRET
      value: "sk_test_51Hp9Fakexamplekeylongtokenhere"
    - name: HEROKU_API_KEY
      value: "12345678-1234-1234-1234-123456789012"
    - name: JWT_SECRET
      value: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
    - name: BPF_PROGRAM
      value: "test_ebpf_program"
    # Pull configuration from ConfigMap with sensitive data
    envFrom:
    - configMapRef:
        name: secrets-configmap
  
  # Add a sidecar container without security context
  - name: sidecar
    image: nginx:latest
    # No security context at all
    resources: {}
    ports:
    - containerPort: 80
    # Explicitly run as root with no additional security
    securityContext:
      runAsUser: 0
      allowPrivilegeEscalation: true
    # Add privileged capabilities to the sidecar too
    command: ["/bin/sh"]
    args: ["-c", "nginx && sleep infinity"]
  
  # Define volumes for sensitive mounts
  volumes:
  - name: host-root
    hostPath:
      path: /
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
  - name: proc
    hostPath:
      path: /proc
  - name: sys
    hostPath:
      path: /sys
  - name: dev
    hostPath:
      path: /dev
  - name: etc-passwd
    hostPath:
      path: /etc/passwd
  - name: var-lib-kubelet
    hostPath:
      path: /var/lib/kubelet
  - name: boot
    hostPath:
      path: /boot
  - name: etc-kubernetes
    hostPath:
      path: /etc/kubernetes
  - name: run-secrets
    hostPath:
      path: /run/secrets
  - name: etc
    hostPath:
      path: /etc
  - name: var
    hostPath:
      path: /var
  - name: bin
    hostPath:
      path: /bin
  - name: sbin
    hostPath:
      path: /sbin
  - name: usr-bin
    hostPath:
      path: /usr/bin
  - name: lib
    hostPath:
      path: /lib
  - name: lib64
    hostPath:
      path: /lib64
  - name: sys-fs-bpf
    hostPath:
      path: /sys/fs/bpf

---
# ConfigMap with sensitive data
apiVersion: v1
kind: ConfigMap
metadata:
  name: secrets-configmap
  namespace: default
data:
  PASSWORD: "password123"
  SECRET_TOKEN: "secret-token-value"
  DATABASE_PASSWORD: "db-pass-123"
  API_SECRET: "api-secret-abc"
  SECRET_KEY: "super-secret-key-nobody-should-see"
  ACCESS_KEY: "access-key-for-something-important"
  PASSWORD_ADMIN: "admin-password-very-secure"
  DATABASE_CREDENTIALS: "username:password@hostname:port/dbname"
  PRIVATE_KEY: |
    -----BEGIN RSA PRIVATE KEY-----
    MIIEogIBAAKCAQEApc1RV1ZRs1mFr49F9l+oakG8uAP2jJEEMm1HR9jpHDVn8vva
    nXcmm7ZmvQlkBKZ8HWbJiBSvxB/PdYZvBw==
    -----END RSA PRIVATE KEY-----
  SSH_KEY: |
    ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDciEGvGCjEVLZn9DdKgGJQn
    XPPVHUoxGAsLKxE0yYHyiK0XLxlSQ2Gi5rYShTAmQcbZTIEQP0m6Yc55pHQ== user@example.com
  PGP_PRIVATE_KEY: |
    -----BEGIN PGP PRIVATE KEY BLOCK-----
    Version: GnuPG v2
    ExamplePGPKeyContentLongBlock12345
    -----END PGP PRIVATE KEY BLOCK-----
  OPENSSH_PRIVATE_KEY: |
    -----BEGIN OPENSSH PRIVATE KEY-----
    b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdz
    c2gtcnNhAAAAAwEAAQAAAQEAvx0A+xexample
    -----END OPENSSH PRIVATE KEY-----

---
# Expose pod via service with NodePort
apiVersion: v1
kind: Service
metadata:
  name: security-test-service
  namespace: default
spec:
  selector:
    app: security-test
  type: NodePort
  ports:
  - port: 80
    targetPort: 80
    nodePort: 30080
    name: http

---
# Expose pod via Ingress without TLS
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: security-test-ingress
  namespace: default
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - host: security-test.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: security-test-service
            port:
              number: 80

---
# Overly permissive RBAC role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pod-manager
  namespace: default
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]

---
# Bind the role to the default service account
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: default-pod-manager
  namespace: default
subjects:
- kind: ServiceAccount
  name: default
  namespace: default
roleRef:
  kind: Role
  name: pod-manager
  apiGroup: rbac.authorization.k8s.io

---
# Additional specific permissions for hacking
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: hacker-role
  namespace: default
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["create", "delete", "exec", "attach", "portforward"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create"]
- apiGroups: ["apps"]
  resources: ["deployments", "daemonsets"]
  verbs: ["create", "delete"]
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles"]
  verbs: ["bind", "escalate"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list"]

---
# Bind hacker role to the default service account
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: default-hacker-role
  namespace: default
subjects:
- kind: ServiceAccount
  name: default
  namespace: default
roleRef:
  kind: Role
  name: hacker-role
  apiGroup: rbac.authorization.k8s.io

---
# Create a ClusterRole for even more access
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cluster-admin-role
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]

---
# Bind the ClusterRole to the default service account
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: default-cluster-admin
subjects:
- kind: ServiceAccount
  name: default
  namespace: default
roleRef:
  kind: ClusterRole
  name: cluster-admin-role
  apiGroup: rbac.authorization.k8s.io 