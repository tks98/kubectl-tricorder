apiVersion: v1
kind: Pod
metadata:
  name: security-test-pod-insecure
  namespace: default
  labels:
    app: security-test
  annotations:
    seccomp.security.alpha.kubernetes.io/pod: "unconfined"
spec:
  # Enable host network namespace
  hostNetwork: true
  hostPID: true
  hostIPC: true
  # Automatically mount service account token
  automountServiceAccountToken: true
  # Use the default service account (no restrictions)
  serviceAccountName: default
  # Use unconfined seccomp profile (modern syntax)
  securityContext:
    seccompProfile:
      type: Unconfined
  
  containers:
  - name: security-test
    image: ubuntu:latest
    # Run as root with privileged security context
    securityContext:
      privileged: true
      runAsUser: 0
      allowPrivilegeEscalation: true
      readOnlyRootFilesystem: false
      capabilities:
        add:
          - ALL
          - SYS_ADMIN
          - NET_ADMIN
          - SYS_MODULE
        drop: []
    # Mount sensitive host paths
    volumeMounts:
    - name: host-root
      mountPath: /host-root
    - name: docker-sock
      mountPath: /var/run/docker.sock
    - name: proc
      mountPath: /host-proc
    - name: sys
      mountPath: /host-sys
    - name: dev
      mountPath: /host-dev
    # No resource limits set
    resources: {}
    # Keep container running
    command: ["/bin/bash"]
    args: ["-c", "while true; do sleep 3600; done"]
    # Add environment variables with sensitive patterns
    env:
    - name: DB_PASSWORD
      value: "insecure-password-123"
    - name: API_KEY
      value: "api-key-1234567890"
    - name: AWS_ACCESS_KEY
      value: "AKIAIOSFODNN7EXAMPLE"
    - name: AWS_SECRET_KEY
      value: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
    - name: CREDIT_CARD_NUMBER
      value: "4111111111111111"
    # Pull configuration from ConfigMap with sensitive data
    envFrom:
    - configMapRef:
        name: secrets-configmap
  
  # Add a sidecar container without security context
  - name: sidecar
    image: nginx:latest
    # No security context at all
    resources: {}
    ports:
    - containerPort: 80
  
  # Define volumes for sensitive mounts
  volumes:
  - name: host-root
    hostPath:
      path: /
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
  - name: proc
    hostPath:
      path: /proc
  - name: sys
    hostPath:
      path: /sys
  - name: dev
    hostPath:
      path: /dev 

---
# ConfigMap with sensitive data
apiVersion: v1
kind: ConfigMap
metadata:
  name: secrets-configmap
  namespace: default
data:
  PASSWORD: "password123"
  SECRET_TOKEN: "secret-token-value"
  PRIVATE_KEY: |
    -----BEGIN RSA PRIVATE KEY-----
    MIIEogIBAAKCAQEApc1RV1ZRs1mFr49F9l+oakG8uAP2jJEEMm1HR9jpHDVn8vva
    nXcmm7ZmvQlkBKZ8HWbJiBSvxB/PdYZvBw==
    -----END RSA PRIVATE KEY-----

---
# Expose pod via service with NodePort
apiVersion: v1
kind: Service
metadata:
  name: security-test-service
  namespace: default
spec:
  selector:
    app: security-test
  type: NodePort
  ports:
  - port: 80
    targetPort: 80
    nodePort: 30080
    name: http

---
# Expose pod via Ingress without TLS
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: security-test-ingress
  namespace: default
spec:
  rules:
  - host: security-test.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: security-test-service
            port:
              number: 80

---
# Overly permissive RBAC role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pod-manager
  namespace: default
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]

---
# Bind the role to the default service account
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: default-pod-manager
  namespace: default
subjects:
- kind: ServiceAccount
  name: default
  namespace: default
roleRef:
  kind: Role
  name: pod-manager
  apiGroup: rbac.authorization.k8s.io 